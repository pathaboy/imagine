datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  credits       Int       @default(3)
  videos        Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id            String  @id @default(cuid())
  fps           Int     @default(60)
  totalDuration Int // in secs
  imageStyle    String
  captionStyle  String
  title         String?
  thumbnailUrl  String?
  prompt        String
  scenes        Scene[]
  bgmId         Int?
  bgm           Bgm?    @relation(fields: [bgmId], references: [id])
  captions      String // String of array of {start,end, narration}
  userId        String
  user          User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Scene {
  id              String         @id @default(cuid())
  number          Int
  start           Int // in seconds
  end             Int // in seconds
  sceneTemplateId String
  images          Image[]
  vocals          VoiceContent[]
  videoId         String?
  video           Video?         @relation(fields: [videoId], references: [id])
}

model Image {
  id      String @id @default(cuid())
  number  Int
  prompt  String
  url     String
  sceneId String
  scene   Scene  @relation(fields: [sceneId], references: [id])
}

model VoiceContent {
  id            String  @id @default(cuid())
  narrationTone String
  audioUrl      String
  scene         Scene?  @relation(fields: [sceneId], references: [id])
  sceneId       String?
}

model VoiceOver {
  id         Int    @id @default(autoincrement())
  voice      String @unique
  previewUrl String
}

model Bgm {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  bgmUrl String
  videos Video[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
