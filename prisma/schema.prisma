datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  credits       Int       @default(3)
  videos        Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id                   String             @id @default(cuid())
  prompt               String
  title                String?
  script               String?
  voiceOver            VoiceOverContent[]
  transcriptionId      String?
  transcribedWords     String?
  transcribedSubtitles String?
  scenes               Scene[]
  fps                  Int                @default(30)
  totalDuration        Int? // in ms
  imageStyle           String
  captionStyle         String
  thumbnailUrl         String?
  bgmId                Int?
  bgm                  Bgm?               @relation(fields: [bgmId], references: [id])
  aspectRatio          AspectRatio        @relation(fields: [aspectRatioId], references: [id])
  aspectRatioId        Int                @default(1)
  userId               String
  user                 User               @relation(fields: [userId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model AspectRatio {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  width  Int
  height Int
  videos Video[]
}

model Scene {
  id               String @id @default(cuid())
  number           Int
  start            Int // in ms
  end              Int // in ms
  motionTemplateId String @default("pull-out")
  imagePrompt      String
  imageUrl         String
  shotSize         String @default("full-shot")
  cameraAngle      String @default("shoulder-level")
  videoId          String
  video            Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model VoiceOverContent {
  id       String @id @default(cuid())
  audioUrl String
  voiceId  String
  video    Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId  String
}

model VoiceOver {
  id         Int    @id @default(autoincrement())
  voiceId    String
  name       String
  previewUrl String
}

model Bgm {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  bgmUrl String
  videos Video[]
  volume Int     @default(100)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
