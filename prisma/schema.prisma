datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  credits       Int       @default(3)
  videos        Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id          String         @id @default(cuid())
  fps         Int
  totalFrames Int
  imageStyle  String
  title       String
  prompt      String
  scenes      Scene[]
  script      String
  bgmId       String
  bgm         Bgm            @relation(fields: [bgmId], references: [id])
  captions    Caption[]
  vocals      VoiceContent[]
  userId      String
  user        User           @relation(fields: [userId], references: [id])
}

model Scene {
  id              String  @id @default(cuid())
  number          Int
  fromFrameNumber Int
  totalFrames     Int
  sceneTemplateId String
  images          Image[]
  videoId         String
  video           Video   @relation(fields: [videoId], references: [id])
}

model Caption {
  id           String @id @default(cuid())
  start        Int // starting frame number
  end          Int // ending frame number
  content      String
  captionStyle String
  video        Video  @relation(fields: [videoId], references: [id])
  videoId      String
}

model Image {
  id      String @id @default(cuid())
  number  Int
  prompt  String
  url     String
  sceneId String
  scene   Scene  @relation(fields: [sceneId], references: [id])
}

model VoiceContent {
  id            String @id @default(cuid())
  content       String
  narrationTone String
  audioUrl      String
  voiceOverId   String
  video         Video  @relation(fields: [videoId], references: [id])
  videoId       String
}

model Bgm {
  id     String  @id @default(cuid())
  name   String  @unique
  bgmUrl String
  videos Video[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
